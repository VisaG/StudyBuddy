/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.scu.studybuddy.jform;

import edu.scu.studybuddy.bean.ManageGroupRenderer;
import edu.scu.studybuddy.bean.GroupDefinition;
import edu.scu.studybuddy.bean.GroupStudent;
import edu.scu.studybuddy.bean.Notification;
import edu.scu.studybuddy.bean.Student;
import edu.scu.studybuddy.dbinteraction.GroupDbInteraction;
import edu.scu.studybuddy.framework.MyFrame;
import edu.scu.studybuddy.util.GroupUtil;
import edu.scu.studybuddy.util.NotificationUtil;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.ListSelectionModel;

/**
 * Manage group encapsulates the behavior of modifying the student's groups
 * by allowing the student to: 
 * 1. leave, lock, and unlock their existing groups
 * 2. accept or deny new group requests
 * 3. view their group contact information
 * 4. view, accept or deny notifications from other student to join existing
 * groups.
 * 
 * @author Thil
 */
//JFrame for Manage Group
public class ManageGroup extends MyFrame {

    //Model
    DefaultListModel GroupModel = new DefaultListModel();

    //Objects to hold group infomation for current student and associated groups
    Student student;
    
    //Start finding the students groups and new group requests to show in the
    //group list.
    Vector<GroupDefinition> myGroups, myRequests;
    private void PopulateList() {

        myGroups = GroupUtil.getMyGroupsById(student.getStudentId());
        //Populate the groups
        for (GroupDefinition group : myGroups) {
            GroupModel.addElement(group);
        }

        myRequests = GroupUtil.getMyRequestsById(student.getStudentId());
        //Populate the groups
        for (GroupDefinition request : myRequests) {
            GroupModel.addElement(request);
        }
    }

    /**
     * Creates new form ManageGroup
     */
    private ManageGroup() {
        TabPage.tabs.add(this);
        initComponents();
    }

    public static ManageGroup getInstance() {
        return ManageGroupHolder.INSTANCE;
    }

    @Override
    public void reset() {
        student = session.getStudent();
        NotificationUtil.cleanNotifications(); //clears all accepted and denied requests, because we do nothing with them.
        GroupInfo.setText(null); //on reset clear information pane
        GroupModel.removeAllElements();
        NotificationList.setListData(new Notification[0]);
        PopulateList();
        
        //Generate the Group List
        GroupList.setModel(GroupModel);
        GroupList.setCellRenderer(new ManageGroupRenderer(
                GroupList,
                NotificationList,
                notifAcceptButton,
                notifDenyButton,
                GroupInfo,
                this));
        notifAcceptButton.setEnabled(false);
        notifDenyButton.setEnabled(false);
    }

    private static class ManageGroupHolder {

        private static final ManageGroup INSTANCE = new ManageGroup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        notificationPanel = new javax.swing.JPanel();
        notificationScrollPane = new javax.swing.JScrollPane();
        NotificationList = new javax.swing.JList<>();
        notifAcceptButton = new javax.swing.JButton();
        notifDenyButton = new javax.swing.JButton();
        informationPanel = new javax.swing.JPanel();
        informationScrollPane = new javax.swing.JScrollPane();
        GroupInfo = new javax.swing.JTextArea();
        groupPanel = new javax.swing.JPanel();
        groupScrollPanel = new javax.swing.JScrollPane();
        GroupList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        notificationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Group Notifications", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N

        notificationScrollPane.setViewportView(NotificationList);

        notifAcceptButton.setText("Accept");
        notifAcceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notifAcceptButtonActionPerformed(evt);
            }
        });

        notifDenyButton.setText("Deny");
        notifDenyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notifDenyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout notificationPanelLayout = new javax.swing.GroupLayout(notificationPanel);
        notificationPanel.setLayout(notificationPanelLayout);
        notificationPanelLayout.setHorizontalGroup(
            notificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, notificationPanelLayout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(notifAcceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(notifDenyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
            .addGroup(notificationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(notificationScrollPane)
                .addContainerGap())
        );
        notificationPanelLayout.setVerticalGroup(
            notificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, notificationPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(notificationScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(notificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(notifAcceptButton)
                    .addComponent(notifDenyButton))
                .addGap(15, 15, 15))
        );

        informationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N

        GroupInfo.setColumns(20);
        GroupInfo.setRows(5);
        informationScrollPane.setViewportView(GroupInfo);

        javax.swing.GroupLayout informationPanelLayout = new javax.swing.GroupLayout(informationPanel);
        informationPanel.setLayout(informationPanelLayout);
        informationPanelLayout.setHorizontalGroup(
            informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(informationScrollPane)
                .addContainerGap())
        );
        informationPanelLayout.setVerticalGroup(
            informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(informationScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                .addContainerGap())
        );

        groupPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Group List", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N

        groupScrollPanel.setViewportView(GroupList);

        javax.swing.GroupLayout groupPanelLayout = new javax.swing.GroupLayout(groupPanel);
        groupPanel.setLayout(groupPanelLayout);
        groupPanelLayout.setHorizontalGroup(
            groupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(groupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(groupScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                .addContainerGap())
        );
        groupPanelLayout.setVerticalGroup(
            groupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(groupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(groupScrollPanel)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(groupPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(notificationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(informationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(notificationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(informationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(groupPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    // Button actions that control the notification list
    private void notifAcceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notifAcceptButtonActionPerformed
        Notification notif = NotificationList.getSelectedValue();
        int index = NotificationList.getSelectedIndex();
        DefaultListModel model = (DefaultListModel) GroupList.getModel();
        GroupDefinition groupAtIndex = (GroupDefinition) model.getElementAt(GroupList.getSelectedIndex());
        
        //Update db for approving
        NotificationUtil.removeRequest(
                0,
                groupAtIndex.getGroupId(),
                notif.getStudentId(), 
                true);
        
        //Add student to group
        GroupStudent newMember = new GroupStudent();
        newMember.setGroupId(groupAtIndex.getGroupId());
        newMember.setStudentId(notif.getStudentId());
        GroupDbInteraction.insertInGroup(newMember);
        
        //Refresh notificationList using the same groupAtIndex
        if (groupAtIndex.getNotifications() > 0) {
            NotificationList.setListData(groupAtIndex.getNotificationList());
            NotificationList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            NotificationList.setSelectedIndex(0);
            notifAcceptButton.setEnabled(true);
            notifDenyButton.setEnabled(true);
        } else {
            NotificationList.setListData(new Notification[0]);
            notifAcceptButton.setEnabled(false);
            notifDenyButton.setEnabled(false);
        }
    }//GEN-LAST:event_notifAcceptButtonActionPerformed

    private void notifDenyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notifDenyButtonActionPerformed
        Notification notif = NotificationList.getSelectedValue();
        int index = NotificationList.getSelectedIndex();
        DefaultListModel model = (DefaultListModel) GroupList.getModel();
        GroupDefinition groupAtIndex = (GroupDefinition) model.getElementAt(GroupList.getSelectedIndex());
        //Update db for denying
        NotificationUtil.removeRequest(
                0,
                groupAtIndex.getGroupId(),
                notif.getStudentId(), 
                false);
        
        //Refresh notificationList using the same groupAtIndex
        if (groupAtIndex.getNotifications() > 0) {
            NotificationList.setListData(groupAtIndex.getNotificationList());
            NotificationList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            NotificationList.setSelectedIndex(0);
            notifAcceptButton.setEnabled(true);
            notifDenyButton.setEnabled(true);
        } else {
            NotificationList.setListData(new Notification[0]);
            notifAcceptButton.setEnabled(false);
            notifDenyButton.setEnabled(false);
        }
    }//GEN-LAST:event_notifDenyButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageGroup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageGroup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageGroup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageGroup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ManageGroup.getInstance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea GroupInfo;
    private javax.swing.JList<String> GroupList;
    private javax.swing.JList<Notification> NotificationList;
    private javax.swing.JPanel groupPanel;
    private javax.swing.JScrollPane groupScrollPanel;
    private javax.swing.JPanel informationPanel;
    private javax.swing.JScrollPane informationScrollPane;
    private javax.swing.JButton notifAcceptButton;
    private javax.swing.JButton notifDenyButton;
    private javax.swing.JPanel notificationPanel;
    private javax.swing.JScrollPane notificationScrollPane;
    // End of variables declaration//GEN-END:variables
}
