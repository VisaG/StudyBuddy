/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.scu.studybuddy.jform;

import edu.scu.studybuddy.bean.Calendar;
import edu.scu.studybuddy.bean.Course;
import edu.scu.studybuddy.bean.Student;
import edu.scu.studybuddy.bean.StudentCourse;
import edu.scu.studybuddy.framework.MyFrame;
import edu.scu.studybuddy.util.CalendarUtil;
import edu.scu.studybuddy.util.CourseUtil;
import edu.scu.studybuddy.util.StudentCourseUtil;
import edu.scu.studybuddy.util.StudentUtil;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author visa
 */
//JFrame for My Profile
public class MyProfile extends MyFrame {

    DefaultListModel currCourse = new DefaultListModel();
    DefaultListModel pastCourse = new DefaultListModel();
    DefaultListModel calenList = new DefaultListModel();

    private List<Course> courses = null;
    private Map<String, String> currCourseMap = null;
    private List<Calendar> calendarList = null;
    private String currQtr = null;

    public static MyProfile getInstance() {
        return MyProfileHolder.INSTANCE;
    }

    @Override
    public void reset() {

        jComboBox1.removeAllItems();
        jComboBox1.addItem("Select Quarter:");
        jComboBox2.removeAllItems();
        jComboBox2.addItem("Select Course Description:");
        jComboBox3.removeAllItems();
        jComboBox3.addItem("Select Course to be deleted:");
        jComboBox6.removeAllItems();
        jComboBox6.addItem("Select Course:");
        calenList.removeAllElements();
        pastCourse.removeAllElements();
        currCourse.removeAllElements();

        courses = null;
        currCourseMap = null;
        calendarList = null;
        currQtr = null;

        Student student = session.getStudent();

        jBSaveProfile.setVisible(false);

        SetTextFieldFalse();
        noEdit.setVisible(false);
        currQtr = GetCurrentQuarter();
        DisplayMyProfile(student);
        GetCurrentCourse(student);
        GetPastCourse(student);
        StuTimeAvail(student);

    }

    private static class MyProfileHolder {

        private static final MyProfile INSTANCE = new MyProfile();
    }

    /**
     * Creates new form MyProfile
     */
    private MyProfile() {
        TabPage.tabs.add(this);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPastCourseList = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        jLCourseTitle = new javax.swing.JLabel();
        jBCourseAdd = new javax.swing.JButton();
        jBCourseDelete = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLCurCourseList = new javax.swing.JList<>();
        jComboBox6 = new javax.swing.JComboBox<>();
        jLQtr = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jLFirstName = new javax.swing.JLabel();
        jTFirstName = new javax.swing.JTextField();
        jLemail = new javax.swing.JLabel();
        jTemail = new javax.swing.JTextField();
        jLDegree = new javax.swing.JLabel();
        jTDegree = new javax.swing.JTextField();
        jLLastName = new javax.swing.JLabel();
        jTLastName = new javax.swing.JTextField();
        jLPassword = new javax.swing.JLabel();
        jPasswordField = new javax.swing.JPasswordField();
        jBEdit = new javax.swing.JButton();
        jBProfileUpdate = new javax.swing.JButton();
        noEdit = new javax.swing.JLabel();
        jBSaveProfile = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLTimePref = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jLCalenList = new javax.swing.JList<>();
        jBSavePref = new javax.swing.JButton();
        jComboBox4 = new javax.swing.JComboBox<>();
        jComboBox5 = new javax.swing.JComboBox<>();
        jComboBox7 = new javax.swing.JComboBox<>();
        jBDeletePref = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("List of Past Courses Taken:");

        jScrollPane2.setViewportView(jPastCourseList);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(301, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(236, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Past Courses", jPanel4);

        jLCourseTitle.setText("Current Courses for : ");

        jBCourseAdd.setText("Add Course");
        jBCourseAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCourseAddActionPerformed(evt);
            }
        });

        jBCourseDelete.setText("Delete Course");
        jBCourseDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCourseDeleteActionPerformed(evt);
            }
        });

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jLCurCourseList);

        jComboBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox6ActionPerformed(evt);
            }
        });

        jLQtr.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLQtr.setText("jLabel2");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBCourseAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox6, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox1, 0, 508, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLCourseTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLQtr)
                .addContainerGap(490, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBCourseDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLCourseTitle)
                    .addComponent(jLQtr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBCourseAdd)
                .addGap(15, 15, 15)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBCourseDelete))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Current Courses", jPanel3);

        jLFirstName.setText("First Name -");

        jTFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFirstNameActionPerformed(evt);
            }
        });

        jLemail.setText("email Id* -");

        jTemail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTemailActionPerformed(evt);
            }
        });

        jLDegree.setText("Degree -");

        jLLastName.setText("Last Name -");

        jLPassword.setText("Password - ");

        jBEdit.setText("Edit Profile");
        jBEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEditActionPerformed(evt);
            }
        });

        jBProfileUpdate.setText("Update Profile");
        jBProfileUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBProfileUpdateActionPerformed(evt);
            }
        });

        noEdit.setText("* Cannot change Email Id.");

        jBSaveProfile.setText("Save Profile");
        jBSaveProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSaveProfileActionPerformed(evt);
            }
        });

        jLabel7.setText("Click on edit button to edit profile");

        jLabel8.setText("Click on Update to save profile changes");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(44, 44, 44)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBSaveProfile)
                            .addComponent(jBProfileUpdate)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLLastName)
                                    .addComponent(jLFirstName)
                                    .addComponent(jLDegree)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLemail, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLPassword, javax.swing.GroupLayout.Alignment.LEADING)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTemail, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTDegree, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBEdit)
                            .addComponent(noEdit)))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLFirstName)
                    .addComponent(jTFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLLastName)
                    .addComponent(jTLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLPassword)
                    .addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLemail)
                    .addComponent(jTemail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noEdit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLDegree)
                    .addComponent(jTDegree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBEdit)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jBProfileUpdate))
                .addGap(18, 18, 18)
                .addComponent(jBSaveProfile)
                .addContainerGap(88, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("User Profile", jPanel1);

        jLTimePref.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLTimePref.setText("Time Preferance");

        jScrollPane3.setViewportView(jLCalenList);

        jBSavePref.setText("Save Selection");
        jBSavePref.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSavePrefActionPerformed(evt);
            }
        });

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN" }));
        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });

        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "06:00:00", "07:00:00", "08:00:00", "09:00:00", "10:00:00", "11:00:00", "12:00:00", "13:00:00", "14:00:00", "15:00:00", "16:00:00", "17:00:00", "18:00:00", "19:00:00", "20:00:00", "21:00:00" }));
        jComboBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox5ActionPerformed(evt);
            }
        });

        jComboBox7.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "07:00:00", "08:00:00", "09:00:00", "10:00:00", "11:00:00", "12:00:00", "13:00:00", "14:00:00", "15:00:00", "16:00:00", "17:00:00", "18:00:00", "19:00:00", "20:00:00", "21:00:00" }));

        jBDeletePref.setText("Delete Selection");
        jBDeletePref.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDeletePrefActionPerformed(evt);
            }
        });

        jLabel1.setText("Select from the list above to delete");

        jLabel2.setText("Select Day From :");

        jLabel4.setText("Select Time From:");

        jLabel5.setText("Select Time To");

        jLabel6.setText("Click Save to save selection");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLTimePref)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox4, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBox5, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBox7, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jBSavePref, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jBDeletePref, javax.swing.GroupLayout.Alignment.TRAILING))))))
                        .addGap(325, 325, 325))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLTimePref)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBSavePref)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBDeletePref)
                    .addComponent(jLabel1))
                .addContainerGap(73, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Preference", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jBEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEditActionPerformed

        SetTextFieldTrue();
        noEdit.setVisible(true);
    }//GEN-LAST:event_jBEditActionPerformed

    private void jTFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFirstNameActionPerformed

    }//GEN-LAST:event_jTFirstNameActionPerformed

    private void jBCourseAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCourseAddActionPerformed
        // TODO add your handling code here:
        String courseName = (String) jComboBox6.getSelectedItem();

        int confirmButton = JOptionPane.OK_CANCEL_OPTION;
        int confirmResult = JOptionPane.showConfirmDialog(null, "Do you want to add course?", "Warning", confirmButton);
        int courseId = 0;

        Student student = session.getStudent();

        if (confirmResult == JOptionPane.OK_OPTION) {

            if (courses != null) {

                for (Course course : courses) {
                    if ((course.getCourseShort() + " : " + course.getCourseName()).equals(courseName)) {
                        courseId = course.getCourseId();
                    }
                }
                StudentCourse updateCourse = new StudentCourse();
                updateCourse.setCourseId(courseId);
                updateCourse.setStudentId(student.getStudentId());

                if (StudentCourseUtil.setCourse(updateCourse)) {

                    currCourse.addElement(jComboBox6.getSelectedItem());
                    int itemIndex = jComboBox6.getSelectedIndex();
                    jLCurCourseList.setModel(currCourse);
                    jComboBox3.addItem(courseName);
                    jComboBox6.removeItemAt(itemIndex);

                    JOptionPane.showMessageDialog(null, "Course Saved");
                    Home.getInstance().reset();
                } else {

                    JOptionPane.showMessageDialog(null, "Failed to add course");

                }

            } else {

                JOptionPane.showMessageDialog(null, "Course addition cancelled on user request");

            }

        }
    }//GEN-LAST:event_jBCourseAddActionPerformed

    private void jBCourseDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCourseDeleteActionPerformed
        // TODO add your handling code here:
        String courseDelete = (String) jComboBox3.getSelectedItem();
        courses = CourseUtil.getCourse(currQtr);

        int confirmDelete = JOptionPane.OK_CANCEL_OPTION;
        int deleteResult = JOptionPane.showConfirmDialog(null, "Do you want to drop the course selected ?", "Warning", confirmDelete);
        int delCourseId = 0;

        Student student = session.getStudent();

        if (deleteResult == JOptionPane.OK_OPTION) {

            if (courses != null) {

                for (Course course : courses) {
                    if ((course.getCourseShort() + " : " + course.getCourseName()).equals(courseDelete)) {
                        delCourseId = course.getCourseId();
                    }
                }

                StudentCourse updateCourse = new StudentCourse();
                updateCourse.setCourseId(delCourseId);
                updateCourse.setStudentId(student.getStudentId());

                if (StudentCourseUtil.deleteCourse(delCourseId)) {

                    for (int i = 0; i < currCourse.getSize(); i++) {
                        if (currCourse.getElementAt(i) == jComboBox3.getSelectedItem()) {
                            currCourse.remove(i);
                        }
                    }
                    int delItemIndex = jComboBox3.getSelectedIndex();
                    jComboBox3.removeItemAt(delItemIndex);

                    JOptionPane.showMessageDialog(null, "Course Dropped");
                    reset();
                    Home.getInstance().reset();
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to drop the course");
                }

            }

        } else {

            JOptionPane.showMessageDialog(null, "Course not dropped on user request");

        }


    }//GEN-LAST:event_jBCourseDeleteActionPerformed

    private void jBProfileUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBProfileUpdateActionPerformed

        int dialogButton = JOptionPane.OK_CANCEL_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(null, "Do you want to save changes?", "Warning", dialogButton);
        Student student = session.getStudent();

        if (dialogResult == JOptionPane.OK_OPTION) {

            Student updateStudent = new Student();
            updateStudent.setFirstName(jTFirstName.getText());
            updateStudent.setStudentId(student.getStudentId());
            updateStudent.setHelpFutStud(student.isHelpFutStud());
            updateStudent.setLastName(jTLastName.getText());
            updateStudent.setPassword(jPasswordField.getText());
            updateStudent.setDegree(jTDegree.getText());
            updateStudent.setEmail(jTemail.getText());

            if (StudentUtil.setStudent(updateStudent)) {

                JOptionPane.showMessageDialog(null, "Update Saved");
                DisplayMyProfile(updateStudent);
                session.setStudent(updateStudent);

            } else {

                JOptionPane.showMessageDialog(null, "Failed to update profile");
                DisplayMyProfile(student);

            }

        } else {

            JOptionPane.showMessageDialog(null, "Update cancelled on user request");
            DisplayMyProfile(student);

        }

    }//GEN-LAST:event_jBProfileUpdateActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:

        String quarter = (String) jComboBox1.getSelectedItem();

        courses = CourseUtil.getCourse(quarter);

        List< String> courseByDescp = new ArrayList<String>();

        for (Course course : courses) {
            String s = course.getCourseDesc();

            if (!courseByDescp.contains(s)) {
                courseByDescp.add(s);
                jComboBox2.addItem(s);
            }

        }

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
        String courseDes = (String) jComboBox2.getSelectedItem();

        String tmp = jComboBox6.getItemAt(0);
        jComboBox6.removeAllItems();
        jComboBox6.addItem(tmp);

        if (courses != null) {

            for (Course course : courses) {
                if (course.getCourseDesc().equals(courseDes)) {
                    if (!currCourseMap.containsKey(course.getCourseShort())) {
                        String s = course.getCourseShort() + " : " + course.getCourseName();
                        jComboBox6.addItem(s);
                    }
                }
            }

        }
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox6ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jComboBox6ActionPerformed

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void jBSavePrefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSavePrefActionPerformed
        // TODO add your handling code here:

        String day = (String) jComboBox4.getSelectedItem();
        String timeFrom = (String) jComboBox5.getSelectedItem();
        String timeTo = (String) jComboBox7.getSelectedItem();
        Student student = session.getStudent();

        if (student != null) {

            boolean weekDay = false;
            boolean newPreference = false;
            boolean timeCheck = false;

            //Handles the case if the weekday selected is not in the list
            for (Calendar calChkDay : calendarList) {

                if ((calChkDay.getWeekday().equalsIgnoreCase(day))) {
                    weekDay = true;
                }
            }
            //Check for start time < than end time        
            if (timeFrom.compareTo(timeTo) < 0) {
                timeCheck = true;
            }

            if (weekDay && timeCheck) {
                for (Calendar calendar : calendarList) {
                    //If the day selected matches the day in list
                    if ((calendar.getWeekday().contains(day))) {

                        if ((!(timeFrom.equalsIgnoreCase(calendar.getAvailTimeFrom())
                                || timeTo.equalsIgnoreCase(calendar.getAvailTimeTo())))) {

                            if (((timeFrom.compareTo(calendar.getAvailTimeFrom()) < 0)
                                    && ((timeTo.compareTo(calendar.getAvailTimeFrom()) < 0)
                                    || (timeTo.equalsIgnoreCase(calendar.getAvailTimeFrom()))))
                                    || (((timeFrom.compareTo(calendar.getAvailTimeTo()) > 0)
                                    || (timeFrom.equalsIgnoreCase(calendar.getAvailTimeTo())))
                                    && (timeTo.compareTo(calendar.getAvailTimeTo()) > 0))
                                    || (((!(timeFrom.equalsIgnoreCase(calendar.getAvailTimeFrom())))
                                    && timeTo.equalsIgnoreCase(calendar.getAvailTimeTo())))) {

                                newPreference = true;

                            } else {
                                newPreference = false;
                                break;
                                // break here immediately...becos of overlap
                            }
                        } else {
                            newPreference = false;
                            break;
                        }
                    }
                }
            } else if (timeCheck) {
                newPreference = true;
            }

            if (newPreference) {

                int dialogButton = JOptionPane.OK_CANCEL_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(null,
                        "Do you want to save preferance?", "Warning", dialogButton);

                if (dialogResult == JOptionPane.OK_OPTION) {

                    Calendar insertTimePref = new Calendar();
                    insertTimePref.setAvailTimeFrom(timeFrom);
                    insertTimePref.setAvailTimeTo(timeTo);
                    insertTimePref.setWeekday(day);
                    insertTimePref.setStudentId(student.getStudentId());

                    if (CalendarUtil.insertTimePref(insertTimePref)) {

                        JOptionPane.showMessageDialog(null, "Update Saved");
                        String updatePref = insertTimePref.getWeekday()
                                + " - FROM : " + insertTimePref.getAvailTimeFrom()
                                + " TO : " + insertTimePref.getAvailTimeTo();
                        calenList.addElement(updatePref);
                        jLCalenList.setModel(calenList);
                        reset();

                    } else {

                        JOptionPane.showMessageDialog(null, "Failed to update profile");

                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Update cancelled on user request");
                }
            } else if (!timeCheck) {
                JOptionPane.showMessageDialog(null,
                        "Start time cannot be equal or greater than End time");
            } else {
                JOptionPane.showMessageDialog(null,
                        "Please select different time interval that does not "
                        + "\n overlap with exisiting time preference");
            }

        }
    }//GEN-LAST:event_jBSavePrefActionPerformed

    private void jComboBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox5ActionPerformed

    private void jBDeletePrefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDeletePrefActionPerformed
        // TODO add your handling code here:

        int selectIndex = jLCalenList.getSelectedIndex();
        String select = jLCalenList.getSelectedValue();
        Calendar delTimePref = new Calendar();
        Student student = session.getStudent();

        int dialogButton = JOptionPane.OK_CANCEL_OPTION;

        int dialogResult = JOptionPane.showConfirmDialog(null,
                "Do you want to delete preferance?", "Warning", dialogButton);

        if (dialogResult == JOptionPane.OK_OPTION) {

            if (student != null) {

                for (Calendar calendar : calendarList) {
                    String s = calendar.getWeekday()
                            + " - FROM : " + calendar.getAvailTimeFrom()
                            + " TO : " + calendar.getAvailTimeTo();

                    if (select.contains(s)) {
                        delTimePref.setStudentId(calendar.getStudentId());
                        delTimePref.setAvailTimeFrom(calendar.getAvailTimeFrom());
                        delTimePref.setAvailTimeTo(calendar.getAvailTimeTo());
                        delTimePref.setWeekday(calendar.getWeekday());

                    }
                }
                if (CalendarUtil.delTimePref(delTimePref)) {

                    if (selectIndex != -1) {
                        calenList.remove(selectIndex);
                    }
                    JOptionPane.showMessageDialog(null, "Time Preference deleted");
                    reset();

                } else {

                    JOptionPane.showMessageDialog(null, "Failed to delete Time Preference");
                }

            }

        } else {

            JOptionPane.showMessageDialog(null, "Time Preference not added on user request");

        }

    }//GEN-LAST:event_jBDeletePrefActionPerformed

    private void jTemailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTemailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTemailActionPerformed

    private void jBSaveProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSaveProfileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBSaveProfileActionPerformed

    private void SetTextFieldFalse() {

        jTFirstName.setEditable(false);
        jTLastName.setEditable(false);
        jTDegree.setEditable(false);
        jTemail.setEditable(false);
        jPasswordField.setEditable(false);

    }

    private void SetTextFieldTrue() {

        jTFirstName.setEditable(true);
        jTLastName.setEditable(true);
        jTDegree.setEditable(true);
        jTemail.setEditable(false);
        jPasswordField.setEditable(false);

    }

    private void DisplayMyProfile(Student student) {

        jTFirstName.setText(student.getFirstName());
        jTLastName.setText(student.getLastName());
        jTDegree.setText(student.getDegree());
        jTemail.setText(student.getEmail());
        jPasswordField.setText(student.getPassword());

    }

    private void GetCurrentCourse(Student student) {

        if (currCourseMap == null) {
            currCourseMap = new HashMap<String, String>();
        }

        if (student != null) {
            List<StudentCourse> stuCourses = StudentCourseUtil.getCurrentCoursesByStuId(student.getStudentId());
            jLCurCourseList.removeAll();

            if (!stuCourses.isEmpty()) {

                for (StudentCourse stuCourse : stuCourses) {

                    String s = stuCourse.getCourse().getCourseShort() + " : "
                            + stuCourse.getCourse().getCourseName();

                    currCourse.addElement(s);
                    jComboBox3.addItem(s);
                    currCourseMap.put(stuCourse.getCourse().getCourseShort(),
                            stuCourse.getCourse().getCourseShort());

                }
                jComboBox1.addItem(currQtr);
                jLQtr.setText(currQtr);
                jLCurCourseList.setModel(currCourse);

            } else {

                jLQtr.setText(currQtr);
                jComboBox1.addItem(currQtr);

            }
        }
    }

    private static String GetCurrentQuarter() {

        String getQtr = CourseUtil.getCurrQtr();
        return getQtr;
    }

    private void GetPastCourse(Student student) {

        if (student != null) {

            List<StudentCourse> pastStuCourse = StudentCourseUtil.getPastCourseByStuId(student.getStudentId());
            jPastCourseList.removeAll();

            for (StudentCourse stuCourse : pastStuCourse) {

                String s = stuCourse.getCourse().getCourseShort() + " : "
                        + stuCourse.getCourse().getCourseName() + " : "
                        + stuCourse.getCourse().getQuarter();

                pastCourse.addElement(s);
            }

            jPastCourseList.setModel(pastCourse);
        }

    }

    private void StuTimeAvail(Student student) {

        if (student != null) {

            calendarList = CalendarUtil.getCalendarByStuId(student.getStudentId());
            jLCalenList.removeAll();

            for (Calendar calendar : calendarList) {
                String s = calendar.getWeekday() + " - FROM : "
                        + calendar.getAvailTimeFrom() + " TO : "
                        + calendar.getAvailTimeTo();

                calenList.addElement(s);
            }

            jLCalenList.setModel(calenList);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyProfile.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyProfile.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyProfile.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyProfile.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                MyProfile.getInstance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBCourseAdd;
    private javax.swing.JButton jBCourseDelete;
    private javax.swing.JButton jBDeletePref;
    private javax.swing.JButton jBEdit;
    private javax.swing.JButton jBProfileUpdate;
    private javax.swing.JButton jBSavePref;
    private javax.swing.JButton jBSaveProfile;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JComboBox<String> jComboBox5;
    private javax.swing.JComboBox<String> jComboBox6;
    private javax.swing.JComboBox<String> jComboBox7;
    private javax.swing.JList<String> jLCalenList;
    private javax.swing.JLabel jLCourseTitle;
    private javax.swing.JList<String> jLCurCourseList;
    private javax.swing.JLabel jLDegree;
    private javax.swing.JLabel jLFirstName;
    private javax.swing.JLabel jLLastName;
    private javax.swing.JLabel jLPassword;
    private javax.swing.JLabel jLQtr;
    private javax.swing.JLabel jLTimePref;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLemail;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPasswordField jPasswordField;
    private javax.swing.JList<String> jPastCourseList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTDegree;
    private javax.swing.JTextField jTFirstName;
    private javax.swing.JTextField jTLastName;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTemail;
    private javax.swing.JLabel noEdit;
    // End of variables declaration//GEN-END:variables
}
